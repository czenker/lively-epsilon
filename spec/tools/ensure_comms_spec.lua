insulate("Tools:ensureComms()", function()

    require "init"
    require "spec.mocks"
    require "spec.asserts"

    it("can send a plain message", function()
        local station = SpaceStation()
        Station:withComms(station)
        local player = PlayerSpaceship()

        Tools:ensureComms(station, player, "Hello World")
        assert.same("Hello World", player:getCurrentCommsText())
    end)

    it("can open a communication channel", function()
        local station = SpaceStation()
        Station:withComms(station)
        station:setHailText("Hello World")
        local player = PlayerSpaceship()

        Tools:ensureComms(station, player)
        assert.same("Hello World", player:getCurrentCommsText())
    end)

    it("is send as soon as the communication channel opens", function()
        local station = SpaceStation()
        Station:withComms(station)
        station:setHailText("Hello World")
        local blocker = SpaceStation()
        Station:withComms(blocker)
        blocker:setHailText("Blocking the connection")
        local player = PlayerSpaceship()

        player:commandOpenTextComm(blocker)

        Tools:ensureComms(station, player)
        assert.same("Blocking the connection", player:getCurrentCommsText())
        Cron.tick(1)
        assert.same("Blocking the connection", player:getCurrentCommsText())
        player:commandCloseTextComm()
        Cron.tick(1)
        assert.same("Hello World", player:getCurrentCommsText())
        player:commandCloseTextComm()
        Cron.tick(1)
        assert.is_true(player:isCommsInactive())
    end)

    it("aborts when sender is destroyed", function()
        local station = SpaceStation()
        Station:withComms(station)
        station:setHailText("Hello World")
        local blocker = SpaceStation()
        Station:withComms(blocker)
        blocker:setHailText("Blocking the connection")
        local player = PlayerSpaceship()

        player:commandOpenTextComm(blocker)

        Tools:ensureComms(station, player)
        Cron.tick(1)
        station:destroy()
        player:commandCloseTextComm()
        Cron.tick(1)
        assert.is_true(player:isCommsInactive())
    end)

    it("aborts when player is destroyed", function()
        local station = SpaceStation()
        Station:withComms(station)
        station:setHailText("Hello World")
        local blocker = SpaceStation()
        Station:withComms(blocker)
        blocker:setHailText("Blocking the connection")
        local player = PlayerSpaceship()

        player:commandOpenTextComm(blocker)

        Tools:ensureComms(station, player)
        Cron.tick(1)
        player:destroy()
        player:commandCloseTextComm()
        Cron.tick(1)
        assert.is_true(player:isCommsInactive())
    end)

    it("fails if no valid player is given", function()
        local station = SpaceStation()
        Station:withComms(station)
        station:setHailText("Hello World")

        assert.has_error(function()
            Tools:ensureComms(station, nil)
        end)
        assert.has_error(function()
            Tools:ensureComms(station, 42)
        end)
        assert.has_error(function()
            Tools:ensureComms(station, CpuShip())
        end)
    end)

    it("fails if no valid station is given", function()
        local player = PlayerSpaceship()

        assert.has_error(function()
            Tools:ensureComms(nil, player)
        end)
        assert.has_error(function()
            Tools:ensureComms(42, player)
        end)
        assert.has_error(function()
            -- does not have comms
            Tools:ensureComms(SpaceStation(), player)
        end)
    end)

    it("fails if third parameter is invalid", function()
        local station = SpaceStation()
        Station:withComms(station)
        local player = PlayerSpaceship()

        assert.has_error(function()
            Tools:ensureComms(station, player, 42)
        end)
        assert.has_error(function()
            Tools:ensureComms(station, player, function() end)
        end)
    end)
end)