insulate("Missions", function()

    require "init"
    require "spec.mocks"
    require "spec.asserts"

    local player = PlayerSpaceship()

    describe(":scan()", function()
        it("should create a valid Mission with one ship", function()
            local mission = Missions:scan(CpuShip())

            assert.is_true(Mission:isMission(mission))
        end)
        it("should create a valid Mission with multiple ships", function()
            local thing1 = CpuShip()
            local thing2 = CpuShip()
            local thing3 = CpuShip()
            local mission = Missions:scan(function() return {thing1, thing2, thing3} end)
            assert.is_true(Mission:isMission(mission))
            mission:setPlayer(player)
            mission:accept()
            mission:start()

            assert.contains_value(thing1, mission:getTargets())
            assert.contains_value(thing2, mission:getTargets())
            assert.contains_value(thing3, mission:getTargets())
        end)
        it("fails if the first parameter is a station", function()
            assert.has_error(function() Missions:scan(SpaceStation()) end)
        end)
        it("fails if the first parameter is a table where one item is a station", function()
            assert.has_error(function() Missions:scan({CpuShip(), SpaceStation(), CpuShip()}) end)
        end)
        it("fails if the first parameter is not given", function()
            assert.has_error(function() Missions:scan() end)
        end)
        it("should create a valid Mission if a callback function is given that returns one ship", function()
            local ship = CpuShip()
            local mission = Missions:scan(function() return ship end)
            assert.is_true(Mission:isMission(mission))
            mission:setPlayer(player)
            mission:accept()
            mission:start()

            assert.is_same({ship}, mission:getTargets())
        end)
        it("should create a valid Mission if a callback function is given that returns multiple space objects", function()
            local thing1 = CpuShip()
            local thing2 = CpuShip()
            local thing3 = CpuShip()
            local mission = Missions:scan(function() return {thing1, thing2, thing3} end)
            assert.is_true(Mission:isMission(mission))
            mission:setPlayer(player)
            mission:accept()
            mission:start()

            assert.contains_value(thing1, mission:getTargets())
            assert.contains_value(thing2, mission:getTargets())
            assert.contains_value(thing3, mission:getTargets())
        end)
        it("fails if a call back function is given, but returns a station", function()
            local mission = Missions:scan(function() return SpaceStation() end)
            mission:setPlayer(player)
            mission:accept()
            assert.has_error(function()
                mission:start()
            end)
        end)
        it("fails if a call back function is given, but returns a table where one item is a station", function()
            local mission = Missions:scan(function() return {CpuShip(), SpaceStation(), CpuShip()} end)
            mission:setPlayer(player)
            mission:accept()

            assert.has_error(function()
                mission:start()
            end)
        end)
        it("fails if a call back function is given that returns nil", function()
            local mission = Missions:scan(function() return nil end)
            mission:setPlayer(player)
            mission:accept()

            assert.has_error(function()
                mission:start()
            end)
        end)
        it("fails if no player was set", function()
            local mission = Missions:scan(CpuShip())

            assert.has_error(function()
                mission:accept()
                mission:start()
            end)
        end)

        it("fails if second parameter is a number", function()
            assert.has_error(function() Missions:scan(CpuShip(), 3) end)
        end)
    end)

    describe("getTargets(), countTargets(), getScannedTargets(), countScannedTargets(), getUnscannedTargets(), countUnscannedTargets()", function()
        it("return correct values", function()
            local target1 = CpuShip()
            local target2 = CpuShip()
            local target3 = CpuShip()
            local mission = Missions:scan({ target1, target2, target3 })
            mission:setPlayer(player)
            mission:accept()
            mission:start()

            assert.is_same(3, mission:countTargets())
            assert.is_same(3, mission:countUnscannedTargets())
            assert.is_same(0, mission:countScannedTargets())
            assert.contains_value(target1, mission:getTargets())
            assert.contains_value(target2, mission:getTargets())
            assert.contains_value(target3, mission:getTargets())
            assert.contains_value(target1, mission:getUnscannedTargets())
            assert.contains_value(target2, mission:getUnscannedTargets())
            assert.contains_value(target3, mission:getUnscannedTargets())
            assert.not_contains_value(target1, mission:getScannedTargets())
            assert.not_contains_value(target2, mission:getScannedTargets())
            assert.not_contains_value(target3, mission:getScannedTargets())

            target1:fullScannedByPlayer()
            Cron.tick(1)

            assert.is_same(3, mission:countTargets())
            assert.is_same(2, mission:countUnscannedTargets())
            assert.is_same(1, mission:countScannedTargets())
            assert.contains_value(target1, mission:getTargets())
            assert.contains_value(target2, mission:getTargets())
            assert.contains_value(target3, mission:getTargets())
            assert.not_contains_value(target1, mission:getUnscannedTargets())
            assert.contains_value(target2, mission:getUnscannedTargets())
            assert.contains_value(target3, mission:getUnscannedTargets())
            assert.contains_value(target1, mission:getScannedTargets())
            assert.not_contains_value(target2, mission:getScannedTargets())
            assert.not_contains_value(target3, mission:getScannedTargets())

            target2:fullScannedByPlayer()
            target3:fullScannedByPlayer()
            Cron.tick(1)

            assert.is_same(3, mission:countTargets())
            assert.is_same(0, mission:countUnscannedTargets())
            assert.is_same(3, mission:countScannedTargets())
            assert.contains_value(target1, mission:getTargets())
            assert.contains_value(target2, mission:getTargets())
            assert.contains_value(target3, mission:getTargets())
            assert.not_contains_value(target1, mission:getUnscannedTargets())
            assert.not_contains_value(target2, mission:getUnscannedTargets())
            assert.not_contains_value(target3, mission:getUnscannedTargets())
            assert.contains_value(target1, mission:getScannedTargets())
            assert.contains_value(target2, mission:getScannedTargets())
            assert.contains_value(target3, mission:getScannedTargets())
        end)
        it("return correct values when ships are destroyed", function()
            local target1 = CpuShip()
            local target2 = CpuShip()
            local target3 = CpuShip()
            local mission = Missions:scan({ target1, target2, target3 })
            mission:setPlayer(player)
            mission:accept()
            mission:start()

            assert.is_same(3, mission:countTargets())
            assert.is_same(3, mission:countUnscannedTargets())
            assert.is_same(0, mission:countScannedTargets())
            assert.contains_value(target1, mission:getTargets())
            assert.contains_value(target2, mission:getTargets())
            assert.contains_value(target3, mission:getTargets())
            assert.contains_value(target1, mission:getUnscannedTargets())
            assert.contains_value(target2, mission:getUnscannedTargets())
            assert.contains_value(target3, mission:getUnscannedTargets())
            assert.not_contains_value(target1, mission:getScannedTargets())
            assert.not_contains_value(target2, mission:getScannedTargets())
            assert.not_contains_value(target3, mission:getScannedTargets())

            target1:destroy()
            Cron.tick(1)

            assert.is_same(3, mission:countTargets())
            assert.is_same(2, mission:countUnscannedTargets())
            assert.is_same(0, mission:countScannedTargets())
            assert.contains_value(target1, mission:getTargets())
            assert.contains_value(target2, mission:getTargets())
            assert.contains_value(target3, mission:getTargets())
            assert.not_contains_value(target1, mission:getUnscannedTargets())
            assert.contains_value(target2, mission:getUnscannedTargets())
            assert.contains_value(target3, mission:getUnscannedTargets())
            assert.not_contains_value(target1, mission:getScannedTargets())
            assert.not_contains_value(target2, mission:getScannedTargets())
            assert.not_contains_value(target3, mission:getScannedTargets())

            target2:fullScannedByPlayer()
            Cron.tick(1)

            assert.is_same(3, mission:countTargets())
            assert.is_same(1, mission:countUnscannedTargets())
            assert.is_same(1, mission:countScannedTargets())
            assert.contains_value(target1, mission:getTargets())
            assert.contains_value(target2, mission:getTargets())
            assert.contains_value(target3, mission:getTargets())
            assert.not_contains_value(target1, mission:getUnscannedTargets())
            assert.not_contains_value(target2, mission:getUnscannedTargets())
            assert.contains_value(target3, mission:getUnscannedTargets())
            assert.not_contains_value(target1, mission:getScannedTargets())
            assert.contains_value(target2, mission:getScannedTargets())
            assert.not_contains_value(target3, mission:getScannedTargets())

            target2:destroy()
            Cron.tick(1)

            assert.is_same(3, mission:countTargets())
            assert.is_same(1, mission:countUnscannedTargets())
            assert.is_same(1, mission:countScannedTargets())
            assert.contains_value(target1, mission:getTargets())
            assert.contains_value(target2, mission:getTargets())
            assert.contains_value(target3, mission:getTargets())
            assert.not_contains_value(target1, mission:getUnscannedTargets())
            assert.not_contains_value(target2, mission:getUnscannedTargets())
            assert.contains_value(target3, mission:getUnscannedTargets())
            assert.not_contains_value(target1, mission:getScannedTargets())
            assert.contains_value(target2, mission:getScannedTargets())
            assert.not_contains_value(target3, mission:getScannedTargets())
        end)

        it("should not allow to manipulate the tables", function()
            local target1 = CpuShip()
            local target2 = CpuShip()
            local target3 = CpuShip()
            local mission = Missions:scan({ target1, target2 })
            mission:setPlayer(player)
            mission:accept()
            mission:start()


            local targets = mission:getTargets()
            table.insert(targets, target3)

            assert.is_same(2, mission:countTargets())
            assert.not_contains_value(target3, mission:getTargets())
        end)
        it("returns nil it it is called before the ships are created in the callback", function()
            local enemy1 = CpuShip()
            local enemy2 = CpuShip()
            local enemy3 = CpuShip()
            local mission = Missions:scan(function () return {enemy1, enemy2, enemy3} end)

            assert.is_nil(mission:countTargets())
            assert.is_nil(mission:countScannedTargets())
            assert.is_nil(mission:countUnscannedTargets())
            assert.is_nil(mission:getTargets())
            assert.is_nil(mission:getScannedTargets())
            assert.is_nil(mission:getUnscannedTargets())
        end)
    end)

    describe(":onDestruction()", function()
        it("is called when a target is destroyed", function()
            local target1 = CpuShip()
            local target2 = CpuShip()
            local callback1Called = 0
            local callback2Called = 0
            local mission
            mission = Missions:scan({ target1, target2 }, {onDestruction = function(callMission, callEnemy)
                assert.is_same(mission, callMission)
                if callEnemy == target1 then callback1Called = callback1Called + 1 end
                if callEnemy == target2 then callback2Called = callback2Called + 1 end
            end})

            mission:setPlayer(player)
            mission:accept()
            mission:start()

            Cron.tick(1)
            Cron.tick(1)
            Cron.tick(1)
            assert.is_same(0, callback1Called)
            assert.is_same(0, callback2Called)

            target1:destroy()
            Cron.tick(1)
            assert.is_same(1, callback1Called)
            assert.is_same(0, callback2Called)

            target2:destroy()
            Cron.tick(1)
            assert.is_same(1, callback1Called)
            assert.is_same(1, callback2Called)
        end)
    end)

    describe(":onScan()", function()
        it("is called each time a target is scanned", function()
            local target1 = CpuShip()
            local target2 = CpuShip()
            local target3 = CpuShip()
            local callback1Called = 0
            local callback2Called = 0
            local callback3Called = 0
            local mission
            mission = Missions:scan({ target1, target2, target3 }, {onScan = function(callMission, callTarget)
                if callTarget == target1 then callback1Called = callback1Called + 1 end
                if callTarget == target2 then callback2Called = callback2Called + 1 end
                if callTarget == target3 then callback3Called = callback3Called + 1 end
                assert.is_same(mission, callMission)
            end})

            mission:setPlayer(player)
            mission:accept()
            mission:start()

            Cron.tick(1)
            Cron.tick(1)
            Cron.tick(1)
            assert.is_same(0, callback1Called)
            assert.is_same(0, callback2Called)
            assert.is_same(0, callback3Called)

            target1:fullScannedByPlayer()
            Cron.tick(1)
            assert.is_same(1, callback1Called)
            assert.is_same(0, callback2Called)
            assert.is_same(0, callback3Called)

            target2:fullScannedByPlayer()
            target3:fullScannedByPlayer()
            Cron.tick(1)
            assert.is_same(1, callback1Called)
            assert.is_same(1, callback2Called)
            assert.is_same(1, callback3Called)
        end)

        it("is called by default when friend or foe is identified", function()
            local target = CpuShip()
            local callback1Called = 0
            local mission
            mission = Missions:scan(target, {onScan = function(callMission, callTarget)
                callback1Called = callback1Called + 1
                assert.is_same(mission, callMission)
            end})

            mission:setPlayer(player)
            mission:accept()
            mission:start()

            Cron.tick(1)
            Cron.tick(1)
            assert.is_same(0, callback1Called)

            target:friendOrFoeIdentifiedByPlayer()
            Cron.tick(1)
            assert.is_same(1, callback1Called)

            target:fullScannedByPlayer()
            Cron.tick(1)
            assert.is_same(1, callback1Called)
        end)

        it("is only called after full scan when a full scan is required", function()
            local target = CpuShip()
            local callback1Called = 0
            local mission
            mission = Missions:scan(target, {
                scan = "full",
                onScan = function(callMission, callTarget)
                    callback1Called = callback1Called + 1
                    assert.is_same(mission, callMission)
                end }
            )

            mission:setPlayer(player)
            mission:accept()
            mission:start()

            Cron.tick(1)
            Cron.tick(1)
            assert.is_same(0, callback1Called)

            target:friendOrFoeIdentifiedByPlayer()
            Cron.tick(1)
            assert.is_same(0, callback1Called)

            target:fullScannedByPlayer()
            Cron.tick(1)
            assert.is_same(1, callback1Called)
        end)
    end)

    it("successful mission", function()
        local target1 = CpuShip()
        local target2 = CpuShip()
        local target3 = CpuShip()
        local mission
        mission = Missions:scan({ target1, target2, target3 })

        mission:setPlayer(player)
        mission:accept()
        mission:start()

        Cron.tick(1)
        target1:fullScannedByPlayer()
        Cron.tick(1)
        assert.is_same("started", mission:getState())
        Cron.tick(1)
        target2:fullScannedByPlayer()
        Cron.tick(1)
        assert.is_same("started", mission:getState())
        Cron.tick(1)
        target3:fullScannedByPlayer()
        Cron.tick(1)
        assert.is_same("successful", mission:getState())
    end)

    it("successful mission when not all ships are destroyed", function()
        local target1 = CpuShip()
        local target2 = CpuShip()
        local target3 = CpuShip()
        local mission
        mission = Missions:scan({ target1, target2, target3 })

        mission:setPlayer(player)
        mission:accept()
        mission:start()

        Cron.tick(1)
        target1:destroy()
        target2:destroy()
        Cron.tick(1)
        assert.is_same("started", mission:getState())
        Cron.tick(1)
        target3:fullScannedByPlayer()
        Cron.tick(1)
        assert.is_same("successful", mission:getState())
    end)

    it("fails when all ships are destroyed without having scanned one", function()
        local target1 = CpuShip()
        local target2 = CpuShip()
        local target3 = CpuShip()
        local mission
        mission = Missions:scan({ target1, target2, target3 })

        mission:setPlayer(player)
        mission:accept()
        mission:start()

        Cron.tick(1)
        target1:destroy()
        target2:destroy()
        Cron.tick(1)
        assert.is_same("started", mission:getState())
        Cron.tick(1)
        target3:destroy()
        Cron.tick(1)
        assert.is_same("failed", mission:getState())
    end)
end)